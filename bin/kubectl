#!/usr/bin/env bash
set -Ee -o pipefail
#
# MIT License
#
# Copyright (c) 2020 djeeno
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# Installation
#   sudo bash -cx "curl -fLR https://raw.githubusercontent.com/djeeno/kubectl-wrapper/master/bin/kubectl -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl"
#



# var (common)
httpGet="$( { command -v curl 1>/dev/null && printf "curl -fLRSs"; } || { command -v wget 1>/dev/null && printf "wget -O- -q"; } )"; export httpGet
script_dir=$(cd "$(dirname "$0")" && pwd)
script_fullpath="${script_dir:?}/$(basename "$0")"


# func
__stderrDebug  () {(__tty=$(if tty -s; then echo 0; fi); [[ $DEBUG != true ]] || printf "%s %s\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [  debug]" "$*" 1>&2)}
__stderrNotice () {(__tty=$(if tty -s; then echo 0; fi); printf "${__tty:+\033[01m}%s %s${__tty:+\033[0m}\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [ notice]" "$*" 1>&2)}
__stderrError  () {(__tty=$(if tty -s; then echo 0; fi); printf "${__tty:+\033[31m}%s %s${__tty:+\033[0m}\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [  error]" "$*" 1>&2)}
__stderrOK     () {(__tty=$(if tty -s; then echo 0; fi); printf "${__tty:+\033[32m}%s %s${__tty:+\033[0m}\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [     ok]" "$*" 1>&2)}
__stderrWarn   () {(__tty=$(if tty -s; then echo 0; fi); printf "${__tty:+\033[33m}%s %s${__tty:+\033[0m}\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [warning]" "$*" 1>&2)}
__stderrInfo   () {(__tty=$(if tty -s; then echo 0; fi); printf "${__tty:+\033[34m}%s %s${__tty:+\033[0m}\n" "$(date +%Y-%m-%dT%H:%M:%S%z) [   info]" "$*" 1>&2)}
__displayContext () {
  printf '\033[34m%s %s\033[0m \033[01m%s\033[0m\n' "$(date +%Y-%m-%dT%H:%M:%S%z) [   info]" "kubectl config current-context =>" "$("${kubectl_bin:?}" config current-context 2>/dev/null || echo current-context is not set)" 1>&2
}
__confirmContext () {
  printf '\033[33m%s %s\033[0m'   "$(date +%Y-%m-%dT%H:%M:%S%z) [warning]" "press ENTER KEY to continue... " 1>&2
  read -r;
}
__setupKubectl () {
  local kubectl_bin="${1:?}"
  if [[ ! -f ${kubectl_bin:?} ]]; then
    # if exists and not file, meke backup
    if [[ -e ${kubectl_bin:?} ]]; then
      mv -v "${kubectl_bin:?}" ".${kubectl_bin:?}.backup"
    fi
    VERSION=$(${httpGet:?"curl or wget are required"} https://storage.googleapis.com/kubernetes-release/release/stable.txt)
    SYSTEM=$(uname -s | tr '[:upper:]' '[:lower:]')
    mkdir -p "$(dirname "${kubectl_bin}")"
    cmd="${httpGet:?"curl or wget are required"} https://storage.googleapis.com/kubernetes-release/release/${VERSION:?}/bin/${SYSTEM:?}/amd64/kubectl >${kubectl_bin:?}"
    __stderrInfo "RUN: ${cmd:?}" && if [[ -w ${kubectl_bin:?} ]] || { [[ -w $(dirname "${kubectl_bin:?}") ]] && [[ ! -e ${kubectl_bin:?} ]]; }; then bash -cx "${cmd:?}"; else sudo -u root bash -cx "${cmd:?}"; fi
  fi
  if [[ ! -x ${kubectl_bin:?} ]]; then
    cmd="chmod +x ${kubectl_bin:?}"
    __stderrInfo "RUN: ${cmd:?}" && if [[ -w ${kubectl_bin:?} ]] || { [[ -w $(dirname "${kubectl_bin:?}") ]] && [[ ! -e ${kubectl_bin:?} ]]; }; then bash -cx "${cmd:?}"; else sudo -u root bash -cx "${cmd:?}"; fi
  fi
}
__updateSelf () {
  __stderrInfo "Update self."
  cmd="${httpGet:?"curl or wget are required"} https://github.com/djeeno/kubectl-wrapper/releases/latest/download/kubectl >\"$0\"; chmod -v +x \"$0\""
  __stderrInfo "RUN: ${cmd:?}" && if [[ -w $0 ]] || { [[ -w $(dirname "$0") ]] && [[ ! -e $0 ]]; }; then bash -cx "${cmd:?}"; else sudo -u root bash -cx "${cmd:?}"; fi
  __stderrInfo "Updated."
  exit 0
}

__main () {
  # subcommands
  if [[ $1 = update-self ]]; then __updateSelf; fi
  # kubectl
  local kubectl_bin
  kubectl_bin=$(
    echo "$PATH" | tr : "\n" |
      # check binary command existence
      xargs -I@ sh -c "grep -q \"[^[:print:][:blank:]]\" \"@/kubectl\" && echo \"@/kubectl\"" 2>/dev/null |
      # avoid to infinite loop
      grep -v "^${script_fullpath:?}" |
      # first file fullpath in PATH
      head -n 1 | cut -d: -f1
  ) || true
  __stderrDebug "kubectl in PATH (kubectl_bin): $kubectl_bin"
  if [[ ! -x $kubectl_bin ]] || [[ ! -f $kubectl_bin ]]; then
    kubectl_bin="${HOME:?}/bin/kubectl"
    __setupKubectl "${kubectl_bin:?}"
  fi
  # KUBECTL_EXTERNAL_DIFF
  export KUBECTL_EXTERNAL_DIFF="${KUBECTL_EXTERNAL_DIFF:-$(command -v cdiff)}"
  # main
  if echo "$*" | grep -q -- "--context[[:space:]=]"; then
    # shellcheck disable=SC2001
    __stderrInfo "RUN: kubectl $*"
    "${kubectl_bin:?}" "$@"
  elif [[ $KUBECTL_CONTEXT ]]; then
    __stderrInfo "RUN: kubectl --context=${KUBECTL_CONTEXT:?} $*"
    "${kubectl_bin:?}" --context="${KUBECTL_CONTEXT:?}" "$@"
  else
    __displayContext
    # If NOT read only command,
    if [[ ! $# -le 1 ]] &&
      ! { echo " $* " | grep -Eq -- ' -h | --help | --dry-run '; } &&
      ! { echo " $* " | grep -Eq ' api-resources | api-version | cluster-info | completion | config | describe | diff | explain | get | logs | port-forward | top | version | wait '; }; then
      # confirm current-context
      if ! __confirmContext; then
        exit 1
      fi
    fi;
    # run
    "${kubectl_bin:?}" "$@"
  fi
}

# entrypoint
__main "$@"
