#!/usr/bin/env bash
set -Ee -o pipefail
#
# MIT License
#
# Copyright (c) 2020 djeeno
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ---
#
# Install
#
#   # for curl
#   sudo bash -cx "curl -LR https://github.com/djeeno/kubectl-wrapper/releases/latest/download/kubectl -o /usr/local/bin/kubectl && chmod -v +x /usr/local/bin/kubectl"
#
#   # for wget
#   sudo bash -cx "wget -c https://github.com/djeeno/kubectl-wrapper/releases/latest/download/kubectl -O /usr/local/bin/kubectl && chmod -v +x /usr/local/bin/kubectl"
#

# var (common)
httpGet="$( { command -v curl 1>/dev/null && printf "curl -fLRSs"; } || { command -v wget 1>/dev/null && printf "wget -O- -q"; } )"; export httpGet
script_dir=$(cd "$(dirname "$0")" && pwd)
script_fullpath="${script_dir:?}/$(basename "$0")"

# export for func
[ "${LOG_COLOR:-}" = false ] || export enablecolor=true
export  pipe_debug="awk \"{print \\\"${enablecolor:+\\\\033[0;34m}\$(date +%Y-%m-%dT%H:%M:%S%z) [ debug] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"
export   pipe_info="awk \"{print \\\"${enablecolor:+\\\\033[0;32m}\$(date +%Y-%m-%dT%H:%M:%S%z) [  info] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"
export pipe_notice="awk \"{print \\\"${enablecolor:+\\\\033[0;36m}\$(date +%Y-%m-%dT%H:%M:%S%z) [notice] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"
export   pipe_warn="awk \"{print \\\"${enablecolor:+\\\\033[0;33m}\$(date +%Y-%m-%dT%H:%M:%S%z) [  warn] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"
export  pipe_error="awk \"{print \\\"${enablecolor:+\\\\033[0;31m}\$(date +%Y-%m-%dT%H:%M:%S%z) [ error] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"
export   pipe_crit="awk \"{print \\\"${enablecolor:+\\\\033[1;31m}\$(date +%Y-%m-%dT%H:%M:%S%z) [  crit] \\\"\\\$0\\\"${enablecolor:+\\\\033[0m}\\\"}\" /dev/stdin"

# func
export severity="${LOG_SEVERITY:--1}"
Debugln  () { [ "${severity:--1}" -gt 100 ] 2>/dev/null || echo "$*" | bash -c "${pipe_debug:?}"  1>&2; }
Infoln   () { [ "${severity:--1}" -gt 200 ] 2>/dev/null || echo "$*" | bash -c "${pipe_info:?}"   1>&2; }
Noticeln () { [ "${severity:--1}" -gt 300 ] 2>/dev/null || echo "$*" | bash -c "${pipe_notice:?}" 1>&2; }
Warnln   () { [ "${severity:--1}" -gt 400 ] 2>/dev/null || echo "$*" | bash -c "${pipe_warn:?}"   1>&2; }
Errorln  () { [ "${severity:--1}" -gt 500 ] 2>/dev/null || echo "$*" | bash -c "${pipe_error:?}"  1>&2; }
Critln   () { [ "${severity:--1}" -gt 600 ] 2>/dev/null || echo "$*" | bash -c "${pipe_crit:?}"   1>&2; }
Run      () { Debugln "$ $(s=" "; i=1; for a in "$@"; do if [ $i = $# ]; then s=""; fi; if echo "$a" | grep -Eq "[[:blank:]]"; then printf "'%s'$s" "$a"; else printf "%s$s" "$a"; fi; done;)"; "$@"; }
Catch    () { err=$?; Errorln "exit ${err-}"; return ${err-}; } && trap Catch ERR

__displayContext () {
  Noticeln "${kubectl_bin:?} config current-context: $("${kubectl_bin:?}" config current-context 2>/dev/null || echo current-context is not set; exit 1)"
}
__confirmContext () {
  Warnln "press ENTER KEY to continue..."
  read -r;
}
__setupKubectl () {
  local kubectl_bin="${1:?}"
  if [[ ! -f ${kubectl_bin:?} ]]; then
    [[ $(uname -m) != x86_64 ]] || ARCH=amd64
    [[ $(uname -m) != arm64  ]] || ARCH=arm64
    # If not supported ARCH, return 1
    if [[ ! ${ARCH-} ]]; then
      Errorln "Installation kubectl for architecture $(uname -m) is not supported"
      return 1
    fi
    # If exists and not file, meke backup
    if [[ -e ${kubectl_bin:?} ]]; then
      mv -v "${kubectl_bin:?}" ".${kubectl_bin:?}.backup"
    fi
    VERSION=$(${httpGet:?"curl or wget are required"} https://storage.googleapis.com/kubernetes-release/release/stable.txt)
    SYSTEM=$(uname -s | tr '[:upper:]' '[:lower:]')
    URL="https://storage.googleapis.com/kubernetes-release/release/${VERSION:?}/bin/${SYSTEM:?}/${ARCH:?}/kubectl"
    mkdir -p "$(dirname "${kubectl_bin}")"
    cmd="${httpGet:?"curl or wget are required"} ${URL:?} >${kubectl_bin:?}"
    if [[ -w ${kubectl_bin:?} ]] || { [[ -w $(dirname "${kubectl_bin:?}") ]] && [[ ! -e ${kubectl_bin:?} ]]; }; then Run bash -c "${cmd:?}"; else Run sudo -u root bash -c "${cmd:?}"; fi
  fi
  if [[ ! -x ${kubectl_bin:?} ]]; then
    cmd="chmod +x ${kubectl_bin:?}"
    if [[ -w ${kubectl_bin:?} ]] || { [[ -w $(dirname "${kubectl_bin:?}") ]] && [[ ! -e ${kubectl_bin:?} ]]; }; then Run bash -c "${cmd:?}"; else Run sudo -u root bash -c "${cmd:?}"; fi
  fi
}
__selfUpdate () {
  Infoln "self update"
  cmd="${httpGet:?"curl or wget are required"} https://github.com/djeeno/kubectl-wrapper/releases/latest/download/kubectl >\"$0\"; chmod -v +x \"$0\""
  if [[ -w $0 ]] || { [[ -w $(dirname "$0") ]] && [[ ! -e $0 ]]; }; then Run bash -c "${cmd:?}"; else Run sudo -u root bash -c "${cmd:?}"; fi
  Infoln "updated"
  exit 0
}



# main
__main () {
  # subcommands
  if [[ $1 = self-update ]]; then __selfUpdate; fi
  # kubectl
  local kubectl_bin
  kubectl_bin=$(
    echo "$PATH" | tr : "\n" |
      # check binary command existence
      xargs -I@ sh -c "grep -q \"[^[:print:][:blank:]]\" \"@/kubectl\" && echo \"@/kubectl\"" 2>/dev/null |
      # avoid to infinite loop
      grep -v "^${script_fullpath:?}" |
      # first file fullpath in PATH
      head -n 1 | cut -d: -f1 ||
      # force to return 0
      true
  )
  if [[ ! -x $kubectl_bin ]] || [[ ! -f $kubectl_bin ]]; then
    kubectl_bin="${HOME:?}/bin/kubectl"
    __setupKubectl "${kubectl_bin:?}"
  fi
  # KUBECTL_EXTERNAL_DIFF
  export KUBECTL_EXTERNAL_DIFF="${KUBECTL_EXTERNAL_DIFF-$(command -v cdiff || true)}"
  # main
  if echo "$*" | grep -q -- "--context[[:space:]=]"; then
    # shellcheck disable=SC2001
    Run "${kubectl_bin:?}" "$@"
  elif [[ $KUBECTL_CONTEXT ]]; then
    Run "${kubectl_bin:?}" --context="${KUBECTL_CONTEXT:?}" "$@"
  else
    __displayContext
    # If NOT read only command,
    if [[ ! $# -le 1 ]] &&
      ! { echo " $* " | grep -Eq -- ' -h | --help | --dry-run[ =]'; } &&
      ! { echo " $* " | grep -Eq ' api-resources | api-version | cluster-info | completion | config | describe | diff | explain | get | logs | port-forward | top | version | wait '; }; then
      # confirm current-context
      if ! __confirmContext; then
        exit 1
      fi
    fi;
    # run
    KUBECTL_CONTEXT=$("${kubectl_bin:?}" config current-context 2>/dev/null)
    export KUBECTL_CONTEXT
    __main "$@"
  fi
}



# entrypoint
__main "$@"
